import re
import sqlite3

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
import logging
from calendar import monthrange
from telegram.ext import ConversationHandler, CallbackContext
from db.db import add_reservation, get_reservations_for_user, \
    update_reservation, get_db_connection, get_reservations_for_date, save_reservation, delete_reservation, \
    is_time_available, is_valid_time
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
DATE, TIME_SELECTION, HOUR_SELECTION, DURATION_SELECTION, MINUTE_SELECTION, AUTHOR_NAME, EVENT_NAME, EDIT_SELECTION = range(8)

SELECT_MONTH, SELECT_DAY = range(8, 10)

# –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
HOURS = [f"{i:02d}" for i in range(5, 23)]  # –æ—Ç 09 –¥–æ 22
MINUTES = ["00", "15", "30", "45"]
DAYS = [f"{i:02d}" for i in range(1, 32)]  # –î–Ω–∏ –º–µ—Å—è—Ü–∞ –æ—Ç 01 –¥–æ 31

async def start(update: Update, context: CallbackContext):
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è —Ä–∞–∑–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    keyboard = [
        ['üìÜ –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'],
        ['üìå –ë—Ä–æ–Ω—å', '‚ÑπÔ∏è –û –±–æ—Ç–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                    reply_markup=reply_markup)

async def edit_date(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    context.user_data["edit_field"] = "date"

    months_keyboard = [
        [InlineKeyboardButton(f"{i:02d}", callback_data=f"edit_month_{i:02d}") for i in range(j, j + 4)]
        for j in range(1, 13, 4)
    ]
    reply_markup = InlineKeyboardMarkup(months_keyboard)
    await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü:", reply_markup=reply_markup)

    return DATE

async def start_reservation(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü."""
    context.user_data["year"] = str(datetime.now().year)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥

    months_keyboard = [
        [InlineKeyboardButton(f"{i:02d}", callback_data=f"month_{i:02d}") for i in range(j, j + 4)]
        for j in range(1, 13, 4)
    ]

    reply_markup = InlineKeyboardMarkup(months_keyboard)
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=reply_markup)
    return DATE  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DATE –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞


async def month_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å."""
    query = update.callback_query
    await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å")  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        month = int(query.data.split('_')[1])
        context.user_data["month"] = f"{month:02d}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—è—Ü
        year = int(context.user_data.get("year", 2025))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2025)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        days_in_month = monthrange(year, month)[1]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
        days_keyboard = [
            [InlineKeyboardButton(f"{i:02d}", callback_data=f"day_{i:02d}") for i in
             range(j, min(j + 4, days_in_month + 1))]
            for j in range(1, days_in_month + 1, 4)
        ]
        reply_markup = InlineKeyboardMarkup(days_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è
        await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—è—Ü–∞: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –µ—â–µ —Ä–∞–∑")

    return DATE  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DATE –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è

async def day_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    day = query.data.split('_')[1]
    context.user_data["day"] = day

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    date = f"{context.user_data['year']}-{context.user_data['month']}-{day}"
    context.user_data["date"] = date

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
    reservations = get_reservations_for_date(date)
    booked_hours = {res[0].split(":")[0] for res in reservations}  # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —á–∞—Å—ã

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–Ω—è—Ç—ã–º–∏ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    time_slots = ["05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"]
    table = f"üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n\n"
    for slot in time_slots:
        if slot in booked_hours:
            table += f"{slot} üü• (–∑–∞–Ω—è—Ç–æ)\n"
        else:
            table += f"{slot} üü© (—Å–≤–æ–±–æ–¥–Ω–æ)\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    timeKeyboard = []
    for slot in time_slots:
        if slot not in booked_hours:
            timeKeyboard.append([InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å {slot}", callback_data=f"hour_{slot}")])

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö
    if timeKeyboard:
        reply_markup = InlineKeyboardMarkup(timeKeyboard)
        await query.edit_message_text(table + "\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)
    else:
        await query.edit_message_text(table + "\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")

    return HOUR_SELECTION

async def hour_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å –∏–∑ callback_data
    hour = query.data.split('_')[1]
    context.user_data["hour"] = hour

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    keyboard = [[
        InlineKeyboardButton(minute, callback_data=f"minute_{minute}")
        for minute in MINUTES
    ]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —á–∞—Å: {hour}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:", reply_markup=reply_markup)
    return MINUTE_SELECTION

async def select_day_callback(update, context):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
    selected_day = int(query.data.split("_")[2])
    selected_month = context.user_data.get("month")
    selected_year = context.user_data.get("year", datetime.now().year)  # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ–¥–∞ –≤ user_data, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    selected_date = f"{selected_day:02d}-{selected_month:02d}-{selected_year}"

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    reservations = get_reservations_for_date(selected_date)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    time_slots = ["05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"]
    table = f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {selected_date}:\n\n"
    for slot in time_slots:
        if any(res[0] == slot for res in reservations):  # –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç
            table += f"{slot} üü• (–∑–∞–Ω—è—Ç–æ)\n"
        else:
            table += f"{slot} üü© (—Å–≤–æ–±–æ–¥–Ω–æ)\n"

    await query.edit_message_text(table)


async def minute_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã
        minute = query.data.split('_')[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ 00, 15, 30, 45)
        if minute not in ["00", "15", "30", "45"]:
            keyboard = [
                [InlineKeyboardButton("00", callback_data="minute_00"),
                 InlineKeyboardButton("15", callback_data="minute_15")],
                [InlineKeyboardButton("30", callback_data="minute_30"),
                 InlineKeyboardButton("45", callback_data="minute_45")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=reply_markup
            )
            return MINUTE_SELECTION

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        hour = context.user_data["hour"]
        date = context.user_data["date"]

        # –ï—Å–ª–∏ hour —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å
        hour = hour.split(':')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ hour —ç—Ç–æ —á–∏—Å–ª–æ
        if not hour.isdigit():
            logger.error(f"Invalid hour format: {hour}")
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return MINUTE_SELECTION

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (—É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Å —Ç–æ–∂–µ –≤ –¥–≤—É–∑–Ω–∞—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
        time = f"{int(hour):02d}:{minute}"
        context.user_data["time"] = time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        reservations = get_reservations_for_date(date)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        try:
            start_time = datetime.strptime(time, "%H:%M")
            duration = context.user_data.get("duration", 60)
            end_time = start_time + timedelta(minutes=duration)
        except ValueError as e:
            logger.error(f"Time format error: {time} - {str(e)}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return MINUTE_SELECTION

        is_available = True
        for res in reservations:
            res_time = res[2]  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "HH:MM"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not re.match(r'^\d{2}:\d{2}$', res_time):
                continue

            try:
                res_start = datetime.strptime(res_time, "%H:%M")
                res_duration = int(res[3]) if len(res) > 3 else 60
                res_end = res_start + timedelta(minutes=res_duration)

                if not (end_time <= res_start or start_time >= res_end):
                    is_available = False
                    break
            except ValueError as e:
                logger.error(f"Invalid reservation time format: {res_time} - {str(e)}")
                continue

        if not is_available:
            nearest_time = find_nearest_available_time(time, duration, reservations)
            if nearest_time:
                context.user_data["time"] = nearest_time
                await query.edit_message_text(
                    f"‚ö†Ô∏è –í—Ä–µ–º—è {time} —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n"
                    f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–æ –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {nearest_time}\n"
                    "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):"
                )
            else:
                await query.edit_message_text(
                    f"‚ö†Ô∏è –í—Ä–µ–º—è {time} —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:"
                )
                return await hour_callback(update, context)
        else:
            await query.edit_message_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {time}\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):"
            )

        return DURATION_SELECTION

    except Exception as e:
        logger.error(f"Error in minute_callback: {str(e)}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return MINUTE_SELECTION

async def get_author_name(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    author_name = update.message.text.strip()
    context.user_data["author_name"] = author_name

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return EVENT_NAME


async def get_event_name(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    event_name = update.message.text.strip()
    context.user_data['event_name'] = event_name

    user_id = update.message.from_user.id
    username = update.message.from_user.username or "Unknown"
    author_name = context.user_data.get('author_name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    date = context.user_data['date']
    time = context.user_data['time']
    duration = context.user_data.get('duration', 60)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞

    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ —Ñ–æ—Ä–º–∞—Ç—É HH:MM
    if time.count(":") == 2:
        time = ":".join(time.split(":")[:2])

    if add_reservation(user_id, username, author_name, event_name, date, time, duration):
        await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")

    return ConversationHandler.END


def format_time_range(start_time, duration):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        start = datetime.strptime(start_time, "%H:%M")
        end = start + timedelta(minutes=int(duration))
        return f"{start.strftime('%H:%M')}-{end.strftime('%H:%M')}"
    except ValueError:
        return start_time  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è


def format_reservations_list(reservations):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏."""
    if not reservations:
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."

    lines = []
    for reservation in reservations:
        if len(reservation) == 6:
            username, author, event, date, time, duration = reservation
        else:
            username, author, event, date, time = reservation
            duration = None

        time_range = format_time_range(time, duration) if duration else f"{time} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞)"
        author_text = author if author else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        event_text = event if event else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        lines.append(f"üìÖ {date} ‚è∞ {time_range}\nüë§ {author_text}\nüìå {event_text}\n")

    return "\n".join(lines)

async def my_reservations(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    bookings = get_reservations_for_user(user_id)

    if bookings:
        text = "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        keyboard = []
        for i, booking in enumerate(bookings, 1):
            booking_id, username, author_name, event_name, date, time, duration = booking
            time_range = f"{time} (üïí {duration} –º–∏–Ω)" if duration else f"{time} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞)"
            text += f"{i}. {event_name} –Ω–∞ {date} –≤ {time_range}\n"
            keyboard.append([
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{booking_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_confirm_{booking_id}")
            ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")


async def cancel_confirmation(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    if len(data) < 3:
        await query.edit_message_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    reservation_id = data[2]
    context.user_data["cancel_reservation_id"] = reservation_id

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_cancel_{reservation_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?", reply_markup=reply_markup)

async def confirm_cancel(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    if len(data) < 3:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    reservation_id = data[2]  # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ID: {reservation_id}")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    print(f"–£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ID: {reservation_id}")

    success = delete_reservation(reservation_id)

    if success:
        await query.edit_message_text("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –±—Ä–æ–Ω—å —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")


async def all_reservations(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    context.user_data["view_year"] = str(datetime.now().year)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥

    months_keyboard = [
        [InlineKeyboardButton(f"{i:02d}", callback_data=f"select_month_{i:02d}") for i in range(j, j + 4)]
        for j in range(1, 13, 4)
    ]

    reply_markup = InlineKeyboardMarkup(months_keyboard)
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=reply_markup)
    return SELECT_MONTH


async def month_for_view_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
        month = int(query.data.split('_')[2])
        context.user_data["view_month"] = f"{month:02d}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—è—Ü
        year = int(context.user_data.get("view_year", datetime.now().year))

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        days_in_month = monthrange(year, month)[1]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
        days_keyboard = [
            [InlineKeyboardButton(f"{i:02d}", callback_data=f"select_day_{i:02d}") for i in
             range(j, min(j + 4, days_in_month + 1))]
            for j in range(1, days_in_month + 1, 4)
        ]
        reply_markup = InlineKeyboardMarkup(days_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è
        await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –µ—â–µ —Ä–∞–∑")

    return SELECT_DAY


def get_reservations_for_date(date: str):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    return [("–ò–≥–æ—Ä—å", "–ß–°–í", "11:00", "60")]


async def day_for_view_callback(update: Update, context: CallbackContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    day = query.data.split('_')[2]
    year = context.user_data.get("view_year", datetime.now().year)
    month = context.user_data.get("view_month")
    selected_date = f"{year}-{month}-{day}"

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        with sqlite3.connect('reservations.db') as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT author_name, event_name, time, duration 
                FROM reservations 
                WHERE date = ?
                ORDER BY time
            """, (selected_date,))
            reservations = cursor.fetchall()

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
        def escape_md(text):
            if not text:
                return ""
            escape_chars = r'_*[]()~`>#+-=|{}.!'
            return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

        # –ï—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç
        if not reservations:
            await query.edit_message_text(
                escape_md(f"üìÖ –ù–∞ {day}.{month}.{year} –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"),
                parse_mode="MarkdownV2"
            )
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        time_slots = [
            "05:00", "05:30", "06:00", "06:30", "07:00", "07:30",
            "08:00", "08:30", "09:00", "09:30", "10:00", "10:30",
            "11:00", "11:30", "12:00", "12:30", "13:00", "13:30",
            "14:00", "14:30", "15:00", "15:30", "16:00", "16:30",
            "17:00", "17:30", "18:00", "18:30", "19:00", "19:30"
        ]

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤
        schedule = []
        for slot in time_slots:
            slot_time = datetime.strptime(slot, "%H:%M").time()
            slot_info = {
                "time": slot,
                "status": "üü© –°–í–û–ë–û–î–ù–û",
                "events": []
            }

            for author, event, time_str, duration in reservations:
                try:
                    start = datetime.strptime(time_str, "%H:%M").time()
                    end = (datetime.combine(datetime.today(), start) +
                           timedelta(minutes=int(duration or 60))).time()

                    if start <= slot_time < end:
                        slot_info["status"] = "üü• –ó–ê–ù–Ø–¢–û"
                        slot_info["events"].append(
                            escape_md(f"{event} ({author})")
                        )

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                    continue

            schedule.append(slot_info)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = []
        message_parts.append(escape_md(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}.{month}.{year}:"))
        message_parts.append("")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 —Å–ª–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
        for i in range(0, len(schedule), 2):
            slot1 = schedule[i]
            line = f"{escape_md(slot1['time'])} {escape_md(slot1['status'])}"

            if i + 1 < len(schedule):
                slot2 = schedule[i + 1]
                line += f" \\| {escape_md(slot2['time'])} {escape_md(slot2['status'])}"

            message_parts.append(line)

            if slot1['events']:
                message_parts.append("‚Ä¢ " + "\n‚Ä¢ ".join(slot1['events']))

            if i + 1 < len(schedule) and slot2['events']:
                message_parts.append("‚Ä¢ " + "\n‚Ä¢ ".join(slot2['events']))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        full_message = "\n".join(message_parts)
        if len(full_message) > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            full_message = full_message[:4000] + "\n..."  # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ

        await query.edit_message_text(
            full_message,
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}", exc_info=True)
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    return ConversationHandler.END

async def edit_reservation(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer(cache_time=0)

    # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ callback_data
    reservation_id = int(query.data.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ user_data
    context.user_data["reservation_id"] = reservation_id

    keyboard = [
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="edit_date")],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="edit_time")],
        [InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_author")],
        [InlineKeyboardButton("üìå –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="edit_event")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)
    return EDIT_SELECTION  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

async def edit_time(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    context.user_data["edit_field"] = "time"

    time_keyboard = [
        [InlineKeyboardButton(hour, callback_data=f"edit_hour_{hour}") for hour in HOURS[i:i + 4]]
        for i in range(0, len(HOURS), 4)
    ]
    reply_markup = InlineKeyboardMarkup(time_keyboard)

    await query.edit_message_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å:", reply_markup=reply_markup)
    return HOUR_SELECTION

async def edit_month_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    try:
        month = int(query.data.split('_')[2])
        context.user_data["edit_month"] = f"{month:02d}"
        year = int(datetime.now().year)
        days_in_month = monthrange(year, month)[1]

        days_keyboard = [
            [InlineKeyboardButton(f"{i:02d}", callback_data=f"edit_day_{i:02d}") for i in
             range(j, min(j + 4, days_in_month + 1))]
            for j in range(1, days_in_month + 1, 4)
        ]
        reply_markup = InlineKeyboardMarkup(days_keyboard)

        await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –µ—â–µ —Ä–∞–∑")

    return DATE


async def edit_day_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    day = query.data.split('_')[2]
    context.user_data["edit_day"] = day

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
    new_date = f"{datetime.now().year}-{context.user_data['edit_month']}-{day}"
    context.user_data["new_date"] = new_date

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞: {new_date}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤
    time_keyboard = []
    for i in range(0, len(HOURS), 4):
        row = []
        for j in range(4):
            if i + j < len(HOURS):
                hour = HOURS[i + j]
                row.append(InlineKeyboardButton(hour, callback_data=f"edit_hour_{hour}"))
        time_keyboard.append(row)

    reply_markup = InlineKeyboardMarkup(time_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É: {new_date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å:", reply_markup=reply_markup)

    return HOUR_SELECTION

async def edit_hour_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    hour = query.data.split('_')[2]
    context.user_data["edit_hour"] = hour

    keyboard = [[InlineKeyboardButton(minute, callback_data=f"edit_minute_{minute}") for minute in MINUTES]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–≤—ã–π —á–∞—Å: {hour}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –º–∏–Ω—É—Ç—ã:",
                                  reply_markup=reply_markup)
    return MINUTE_SELECTION

async def edit_minute_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    minute = query.data.split('_')[2]
    time = f"{context.user_data['edit_hour']}:{minute}"
    context.user_data["new_time"] = time

    reservation_id = context.user_data["reservation_id"]
    new_time = context.user_data["new_time"]

    success = True

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –¥–∞—Ç—É, –∏ –≤—Ä–µ–º—è
    if "new_date" in context.user_data:
        new_date = context.user_data["new_date"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        if not update_database(reservation_id, "date", new_date):
            success = False

        # –£–¥–∞–ª–∏–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ—Å—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        del context.user_data["new_date"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    if not update_database(reservation_id, "time", new_time):
        success = False

    if success:
        await query.edit_message_text(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time}")
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END


async def edit_author(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞
    context.user_data["edit_field"] = "author"

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:")
    return AUTHOR_NAME


async def edit_event(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    context.user_data["edit_field"] = "event"

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    return EVENT_NAME

async def cancel_edit(update: Update, context: CallbackContext):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def save_edit(update: Update, context: CallbackContext) -> int:
    if "reservation_id" not in context.user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    reservation_id = context.user_data["reservation_id"]
    new_value = update.message.text  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    field = context.user_data.get("edit_field")

    field_mapping = {
        "author": "author_name",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª–µ–π
        "event": "event_name"
    }

    if field in field_mapping:
        field = field_mapping[field]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è

    if field:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if update_database(reservation_id, field, new_value):  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ update_reservation() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            await update.message.reply_text(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {new_value}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")

    return ConversationHandler.END


def update_database(reservation_id, field, new_value):
    allowed_fields = ["date", "time", "author_name", "event_name"]
    if field not in allowed_fields:
        print(f"[DEBUG] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ: {field}")
        return False

    conn = sqlite3.connect("reservations.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM reservations WHERE id = ?", (reservation_id,))
    if not cursor.fetchone():
        print(f"[DEBUG] –ë—Ä–æ–Ω—å —Å ID {reservation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        conn.close()
        return False

    try:
        query = f"UPDATE reservations SET {field} = ? WHERE id = ?"
        print(f"[DEBUG] SQL: {query} | values: {new_value}, {reservation_id}")
        cursor.execute(query, (new_value, reservation_id))
        conn.commit()
        return True
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False
    finally:
        conn.close()


async def about(update: Update, context: CallbackContext) -> None:
    about_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ø ‚Äî –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤. "
        "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üìÜ\n"
        "2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üìÖ\n"
        "3. –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ üìå\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–¥–æ–±–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
    )

    await update.message.reply_text(about_text)

# –ó–∞–ø—Ä–æ—Å –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤

async def save_duration(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    duration = update.message.text.strip()

    if not duration.isdigit() or int(duration) <= 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60).")
        return DURATION_SELECTION

    context.user_data['duration'] = int(duration)

    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∞)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return AUTHOR_NAME  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

async def edit_duration(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö:")
    return DURATION_SELECTION

async def save_duration_edit(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."""
    duration = update.message.text.strip()

    if not duration.isdigit() or int(duration) <= 0:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
        return DURATION_SELECTION

    reservation_id = context.user_data['edit_reservation_id']
    update_database(reservation_id, "duration", int(duration))

    await update.message.reply_text("‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END

# –í—ã–≤–æ–¥ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

def get_reservations_on_date(date):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    return get_reservations_for_date(date)  # [(time, duration), ...]


def find_nearest_available_time(time, duration, reservations):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        current_time = datetime.strptime(time, "%H:%M")
        duration = int(duration)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        for minutes_to_add in range(15, 24 * 60, 15):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
            new_time = current_time + timedelta(minutes=minutes_to_add)
            new_time_str = new_time.strftime("%H:%M")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            if new_time.hour >= 20:  # –ø–æ—Å–ª–µ 20:00 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º
                continue

            new_end = new_time + timedelta(minutes=duration)
            if new_end.hour >= 20:  # –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 20:00
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            is_available = True
            for res in reservations:
                res_time = res[2]
                if not re.match(r'^\d{2}:\d{2}$', res_time):
                    continue

                try:
                    res_start = datetime.strptime(res_time, "%H:%M")
                    res_duration = int(res[3]) if len(res) > 3 else 60
                    res_end = res_start + timedelta(minutes=res_duration)

                    if not (new_end <= res_start or new_time >= res_end):
                        is_available = False
                        break
                except ValueError:
                    continue

            if is_available:
                return new_time_str

        return None

    except Exception as e:
        logger.error(f"Error in find_nearest_available_time: {str(e)}", exc_info=True)
        return None

async def book_table(update: Update, context: CallbackContext):
    """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ ‚Äì —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ"""
    user_id = update.message.from_user.id
    event_name = "–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"  # –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    date = "2025-04-12"  # –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    time = "14:00"  # –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    duration = 120  # –ù–∞–ø—Ä–∏–º–µ—Ä, 2 —á–∞—Å–∞

    reservations = get_reservations_on_date(date)
    nearest_time = find_nearest_available_time(time, duration, reservations)

    requested_start = datetime.strptime(time, "%H:%M")
    requested_end = requested_start + timedelta(minutes=duration)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Å —Ç–µ–∫—É—â–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
    for start_time, booked_duration in reservations:
        booked_start = datetime.strptime(start_time, "%H:%M")
        booked_end = booked_start + timedelta(minutes=int(booked_duration))

        if not (requested_end <= booked_start or requested_start >= booked_end):
            # –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ
            await update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ({time}) —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n"
                f"–ë–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {nearest_time}. –•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"confirm_{date}_{nearest_time}_{duration}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                ])
            )
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ, –±—Ä–æ–Ω–∏—Ä—É–µ–º
    save_reservation(user_id, event_name, date, time, duration)
    await update.message.reply_text(f"‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {event_name} –Ω–∞ {date} —Å {time} –¥–æ {nearest_time}")
import logging
import random
import datetime
import re
import sqlite3

from vk_api import VkApi
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from datetime import datetime, timedelta
from calendar import monthrange
import json

from db.db import init_db, add_reservation, get_reservations_for_user, update_reservation, \
    get_reservations_for_date, delete_reservation

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

FIELD_NAMES = {
    "date": "–î–∞—Ç–∞",
    "time": "–í—Ä–µ–º—è",
    "author_name": "–ò–º—è –∞–≤—Ç–æ—Ä–∞",
    "event_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "duration": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM (Finite State Machine)
STATES = {
    'START': "start",
    'DATE': "date",
    'MONTH_PERIOD_SELECTION': 'month_period_selection',
    'MONTH_SELECTION': 'month_selection',
    'DAY_PERIOD_SELECTION': 'day_period_selection',
    'DAY_SELECTION': 'day_selection',
    'HOUR_PERIOD_SELECTION': 'hour_period_selection',
    'HOUR_SELECTION': 'hour_selection',
    'MINUTE_SELECTION': "minute_selection",
    'DURATION_SELECTION': "duration_selection",
    'AUTHOR_NAME': "author_name",
    'EVENT_NAME': "event_name",
    'EDIT_SELECTION': "edit_selection",
    'SELECT_MONTH': "select_month",
    'SELECT_DAY': "select_day",
    'SCHEDULE_MONTH_PERIOD': 'schedule_month_period',
    'SCHEDULE_MONTH_SELECTION': 'schedule_month_selection',
    'SCHEDULE_DAY_PERIOD': 'schedule_day_period',
    'SCHEDULE_DAY_SELECTION': 'schedule_day_selection',
    'VIEW_RESERVATIONS': 'view_reservations',
    'EDIT_DATE_SELECTION': 'edit_date_selection',
    'EDIT_MONTH_SELECTION': 'edit_month_selection',
    'EDIT_DAY_SELECTION': 'edit_day_selection',
    'EDIT_HOUR_SELECTION': 'edit_hour_selection',
    'EDIT_TIME_DATE_CHOICE': 'edit_time_date_choice',
    'EDIT_HOUR_PERIOD_SELECTION': 'edit_hour_period_selection',
    'EDIT_MINUTE_SELECTION': 'edit_minute_selection',
    'EDIT_TIME_PERIOD_SELECTION': 'edit_time_period_selection',
    'EDIT_TIME_HOUR_SELECTION': 'edit_time_hour_selection',
    'EDIT_TIME_MINUTE_SELECTION': 'edit_time_minute_selection',
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

class VkBot:
    def __init__(self, token):
        self.pages = None
        self.vk_api = None
        def captcha_handler(captcha):
            print(f"\nüß© –ö–∞–ø—á–∞ –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {captcha.get_url()}")
            key = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É: ").strip()
            return captcha.try_again(key)
        self.vk_session = VkApi(token=token, captcha_handler=captcha_handler)
        self.vk = self.vk_session.get_api()
        self.longpoll = VkLongPoll(self.vk_session)
        init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("VK –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def send_message(self, user_id, message, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            params = {
                'user_id': user_id,
                'message': message,
                'random_id': random.randint(1, 2147483647)
            }

            if keyboard:
                params['keyboard'] = keyboard.get_keyboard()

            self.vk.messages.send(**params)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def get_main_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
        keyboard = VkKeyboard(one_time=False)

        keyboard.add_button('üìÜ –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('üìå –ë—Ä–æ–Ω—å', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('‚ÑπÔ∏è –û –±–æ—Ç–µ', color=VkKeyboardColor.SECONDARY)

        return keyboard

    def get_months_keyboard(self, user_id, prefix="month"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ—Ö –º–µ—Å—è—Ü–µ–≤"""
        keyboard = VkKeyboard(inline=True)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month = datetime.now().month

        # –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        months = [(current_month + i - 1) % 12 + 1 for i in range(4)]  # –¢–µ–∫—É—â–∏–π –∏ 3 —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü–∞
        months_str = [f"{month:02d}" for month in months]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
        button_count = 0  # –°—á—ë—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        for month in months_str:
            keyboard.add_button(month, color=VkKeyboardColor.PRIMARY, payload={"button": f"{prefix}_{month}"})
            button_count += 1

            # –ï—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ 5 –∫–Ω–æ–ø–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            if button_count % 5 == 0:
                keyboard.add_line()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        return keyboard

    def get_days_keyboard(self, user_id, year, month, prefix="day"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–Ω–∏), –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–¥–æ 3 –∫–Ω–æ–ø–æ–∫)"""
        days_in_month = monthrange(year, month)[1]
        keyboard = VkKeyboard(inline=True)

        today = datetime.now()
        current_day = today.day
        current_month = today.month
        current_year = today.year

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–Ω–∏
        days_to_show = [
            day for day in range(1, days_in_month + 1)
            if (year > current_year) or
               (year == current_year and month > current_month) or
               (year == current_year and month == current_month and day >= current_day)
        ]

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è
        days_to_show = days_to_show[:4]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        for day in days_to_show:
            keyboard.add_button(f"{day:02d}", color=VkKeyboardColor.PRIMARY,
                                payload={"button": f"{prefix}_{day:02d}"})

        return keyboard

    def start(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start"""
        keyboard = self.get_main_keyboard()
        self.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)
        user_states[user_id] = STATES['START']

    def about(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã about"""
        about_text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ø ‚Äî –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤. "
            "–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π üìÜ\n"
            "2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è üìÖ\n"
            "3. –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ üìå\n"
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–¥–æ–±–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
        )
        self.send_message(user_id, about_text, self.get_main_keyboard())

    def start_reservation(self, user_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤"""
        if user_id not in user_data:
            user_data[user_id] = {}

        keyboard = VkKeyboard(inline=True)
        keyboard.add_button("–Ø–Ω–≤–∞—Ä—å-–ê–ø—Ä–µ–ª—å (1-4)", color=VkKeyboardColor.PRIMARY,
                            payload={"button": "month_period_1_4"})
        keyboard.add_button("–ú–∞–π-–ê–≤–≥—É—Å—Ç (5-8)", color=VkKeyboardColor.PRIMARY, payload={"button": "month_period_5_8"})
        keyboard.add_line()
        keyboard.add_button("–°–µ–Ω—Ç—è–±—Ä—å-–î–µ–∫–∞–±—Ä—å (9-12)", color=VkKeyboardColor.PRIMARY,
                            payload={"button": "month_period_9_12"})

        self.send_message(user_id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤:", keyboard)
        user_states[user_id] = STATES['MONTH_PERIOD_SELECTION']

    def handle_message(self, user_id, message_text, payload=None):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        state = user_states.get(user_id, STATES['START'])
        message_text = message_text.strip()

        logger.info(f"[{user_id}] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {state}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

        try:
            if state == STATES['EDIT_INPUT']:
                self.process_edit_input(user_id, message_text)
                return

            elif state == STATES['START']:
                self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (0‚Äì10, 10‚Äì20, 20‚Äì31):", self.get_periods_keyboard())
                user_states[user_id] = STATES['PERIOD_SELECTION']

            elif state == STATES['MONTH_SELECTION']:
                self.process_month_selection(user_id, message_text)

            elif state == STATES['DAY_SELECTION']:  # –¢–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –ø–æ—Å–ª–µ –º–µ—Å—è—Ü–∞
                self.process_day_selection(user_id, message_text)

            elif state == STATES['HOUR_PERIOD_SELECTION']:
                self.process_hour_period_selection(user_id, message_text)

            elif state == STATES['HOUR_PERIOD_SELECTION']:
                self.process_hour_period_selection(user_id, message_text)

            elif state == STATES['HOUR_SELECTION']:
                logger.info(f"[{user_id}] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {STATES['HOUR_SELECTION']}")
                self.process_hour_selection(user_id, message_text)

            elif state == STATES['MINUTE_SELECTION']:
                logger.info(f"[{user_id}] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {STATES['MINUTE_SELECTION']}")
                self.process_minute_selection(user_id, message_text)

            elif state == STATES['DURATION_INPUT']:
                self.process_duration_input(user_id, message_text)

            elif state == STATES['AUTHOR_NAME']:
                self.process_author_name(user_id, message_text)

            elif state == STATES['EVENT_NAME']:
                self.process_event_name(user_id, message_text)

            else:
                self.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.")
                user_states[user_id] = STATES['START']


        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {user_id}: {str(e)}")
            self.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            user_states[user_id] = STATES['START']
            if user_id in user_data:
                user_data[user_id].clear()

    def process_month_period_selection(self, user_id, period):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤"""
        try:
            period_map = {
                "month_period_1_4": [1, 2, 3, 4],
                "month_period_5_8": [5, 6, 7, 8],
                "month_period_9_12": [9, 10, 11, 12]
            }

            current_year = datetime.now().year
            current_month = datetime.now().month

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
            available_months = []
            for month in period_map[period]:
                # –ï—Å–ª–∏ –º–µ—Å—è—Ü –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É —É–∂–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                if month < current_month:
                    available_months.append((month, current_year + 1))
                else:
                    available_months.append((month, current_year))

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞–º–∏
            keyboard = VkKeyboard(inline=True)
            row_length = 0
            max_buttons_per_row = 2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ

            for i, (month, year) in enumerate(available_months):
                month_name = self.get_month_name(month)
                if year > current_year:
                    btn_text = f"{month_name} ({year})"
                else:
                    btn_text = month_name

                keyboard.add_button(btn_text, color=VkKeyboardColor.PRIMARY,
                                    payload={"button": f"select_month_{month}_{year}"})
                row_length += 1

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
                # –ò —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞
                if row_length >= max_buttons_per_row and i != len(available_months) - 1:
                    keyboard.add_line()
                    row_length = 0

            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü:", keyboard)
            user_states[user_id] = STATES['MONTH_SELECTION']

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –µ—â–µ —Ä–∞–∑.")

    def get_month_name(self, month_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
        months = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å",
            "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç",
            "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        return months[month_num - 1]

    def process_month_selection(self, user_id, month_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–Ω—å"""
        try:
            month = int(month_data["month"])
            year = int(month_data["year"])

            user_data[user_id]["month"] = f"{month:02d}"
            user_data[user_id]["year"] = str(year)

            logger.info(f"[{user_id}] –í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {month:02d}.{year}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–Ω—è
            self.send_message(user_id,
                              f"üìÖ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ ({self.get_month_name(month)} {year}):")
            user_states[user_id] = STATES['DAY_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—è—Ü–∞: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –µ—â–µ —Ä–∞–∑")

    def get_months_keyboard(self, user_id, prefix="month"):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–µ–≤ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã"""
        current_date = datetime.now()
        current_month = current_date.month

        keyboard = VkKeyboard(inline=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ)
        for month in range(current_month, 13):
            month_str = f"{month:02d}"
            keyboard.add_button(month_str, color=VkKeyboardColor.PRIMARY,
                                payload={"button": f"{prefix}_{month_str}"})
            if month % 4 == 0:  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                keyboard.add_line()

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞ (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
        for month in range(1, current_month):
            month_str = f"{month:02d}"
            keyboard.add_button(f"{month_str} (—Å–ª–µ–¥. –≥–æ–¥)", color=VkKeyboardColor.SECONDARY,
                                payload={"button": f"{prefix}_{month_str}"})
            if (month + 12) % 4 == 0:  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                keyboard.add_line()

        return keyboard

    def show_reservations_for_date(self, user_id, date):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        try:
            reservations = get_reservations_for_date(date)
            if not reservations:
                self.send_message(user_id, f"üìÖ –ù–∞ {date} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
                return

            message = f"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {date}:\n\n"
            for res in reservations:
                time_range = self.format_time_range(res[2], res[3])
                message += f"‚è∞ {time_range} - {res[5]} ({res[4]})\n"

            self.send_message(user_id, message)
        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

    def is_day_fully_booked(self, date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –∑–∞–Ω—è—Ç –¥–µ–Ω—å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(date, "%Y-%m-%d")

            reservations = get_reservations_for_date(date)
            MAX_SLOTS = 12  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–µ–π –≤ –¥–µ–Ω—å

            return len(reservations) >= MAX_SLOTS
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –¥–Ω—è {date}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –¥–µ–Ω—å –∑–∞–Ω—è—Ç—ã–º

    def process_day_selection(self, user_id, day_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        try:
            day = day_input.strip()
            logger.info(f"[{user_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è: {day}")

            if not day.isdigit():
                self.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞.")
                return

            day = int(day)
            month = int(user_data[user_id]["month"])
            year = int(user_data[user_id]["year"])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
            _, last_day = monthrange(year, month)
            if day < 1 or day > last_day:
                self.send_message(user_id, f"‚ùå –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –¥–Ω–µ–π –æ—Ç 1 –¥–æ {last_day}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date = f"{year}-{month:02d}-{day:02d}"
            user_data[user_id].update({
                "day": f"{day:02d}",
                "date": date,
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                "time": None,
                "hour": None
            })

            if self.is_day_fully_booked(date):
                self.send_message(user_id, "‚ùå –≠—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.")
                return

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            self.show_hour_periods(user_id)

        except Exception as e:
            logger.error(f"[{user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–Ω—è: {e}", exc_info=True)
            self.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            self.reset_user_state(user_id)

    def show_hour_periods(self, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            if user_id not in user_data or "date" not in user_data[user_id]:
                raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞")

            date = user_data[user_id]["date"]
            logger.info(f"[{user_id}] –ü–æ–∫–∞–∑ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –¥–∞—Ç—ã: {date}")

            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            reservations = get_reservations_for_date(date)
            booked_slots = []

            for res in reservations:
                try:
                    time_str = res[2]
                    if not re.match(r'^\d{2}:\d{2}$', time_str):
                        continue

                    start = datetime.strptime(time_str, "%H:%M")
                    duration = int(res[3]) if len(res) > 3 and str(res[3]).isdigit() else 60
                    booked_slots.append((
                        start.hour * 60 + start.minute,
                        start.hour * 60 + start.minute + duration
                    ))
                except Exception as e:
                    logger.warning(f"[{user_id}] –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {res} - {e}")
                    continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã (5:00-19:00)
            available_hours = []
            for hour in range(5, 20):
                start_min = hour * 60
                end_min = start_min + 60  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç 1 —á–∞—Å

                if all(end_min <= bs[0] or start_min >= bs[1] for bs in booked_slots):
                    available_hours.append(f"{hour:02d}")

            if not available_hours:
                self.send_message(user_id,
                                  "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                                  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–Ω–µ –±–æ–ª–µ–µ 2 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ)
            keyboard = VkKeyboard(inline=True)

            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Ä–∞–Ω–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            keyboard.add_button("05:00-08:00", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "hour_period_5_8"})
            keyboard.add_button("09:00-12:00", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "hour_period_9_12"})

            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ø–æ–∑–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            keyboard.add_line()
            keyboard.add_button("13:00-16:00", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "hour_period_13_16"})
            keyboard.add_button("17:00-19:00", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "hour_period_17_19"})

            self.send_message(user_id, f"üïí –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {date}:", keyboard)
            user_states[user_id] = STATES['HOUR_PERIOD_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–∏–æ–¥–æ–≤: {e}", exc_info=True)
            self.send_message(user_id,
                              "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            self.reset_user_state(user_id)

    def process_hour_period_selection(self, user_id, period):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —á–∞—Å–æ–≤ —Å —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            if not isinstance(period, dict) or 'button' not in period:
                self.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
                return

            button_payload = period['button']

            # –ü–µ—Ä–∏–æ–¥—ã –∏ –∏—Ö —á–∞—Å—ã
            period_ranges = {
                'hour_period_5_8': (5, 8),
                'hour_period_9_12': (9, 12),
                'hour_period_13_16': (13, 16),
                'hour_period_17_19': (17, 19)
            }

            if button_payload not in period_ranges:
                self.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
                return

            start_hour, end_hour = period_ranges[button_payload]
            date = user_data[user_id]["date"]
            duration = user_data[user_id].get("duration", 60)

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞—Ç—ã
            reservations = get_reservations_for_date(date)
            booked_slots = []

            for res in reservations:
                try:
                    time_str = res[2]
                    res_duration = int(res[3]) if len(res) > 3 else 60
                    start = datetime.strptime(time_str, "%H:%M")
                    start_min = start.hour * 60 + start.minute
                    end_min = start_min + res_duration
                    booked_slots.append((start_min, end_min))
                except Exception as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {res} - {e}")
                    continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ
            available_hours = []
            for hour in range(start_hour, end_hour + 1):
                start_min = hour * 60
                end_min = start_min + duration

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
                is_available = True
                for (booked_start, booked_end) in booked_slots:
                    if not (end_min <= booked_start or start_min >= booked_end):
                        is_available = False
                        break

                if is_available:
                    available_hours.append(f"{hour:02d}")

            if not available_hours:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                nearest = self.find_nearest_available_time(date, duration)
                if nearest:
                    msg = (f"‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤.\n"
                           f"üîÑ –ë–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {nearest}\n"
                           f"–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è?")
                    keyboard = VkKeyboard(inline=True)
                    keyboard.add_button("–î–∞", color=VkKeyboardColor.POSITIVE,
                                        payload={"button": f"book_nearest_{nearest}"})
                    keyboard.add_button("–ù–µ—Ç", color=VkKeyboardColor.NEGATIVE,
                                        payload={"button": "cancel_booking"})
                    self.send_message(user_id, msg, keyboard)
                else:
                    self.send_message(user_id,
                                      "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
            keyboard = VkKeyboard(inline=True)
            for i, hour in enumerate(available_hours):
                keyboard.add_button(hour, color=VkKeyboardColor.PRIMARY,
                                    payload={"button": f"hour_{hour}"})
                if (i + 1) % 3 == 0 and i != len(available_hours) - 1:
                    keyboard.add_line()

            self.send_message(user_id, f"üïí –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã –≤ –ø–µ—Ä–∏–æ–¥–µ {start_hour}:00-{end_hour}:00:", keyboard)
            user_states[user_id] = STATES['HOUR_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}", exc_info=True)
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            self.reset_user_state(user_id)

    def process_hour_selection(self, user_id, hour_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            logger.info(f"[{user_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞: {hour_input}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
            if user_id not in user_data:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            date = user_data[user_id].get("date")
            if not date:
                raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å
            if not isinstance(hour_input, str) or not hour_input.isdigit():
                raise ValueError("–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

            hour = f"{int(hour_input):02d}"  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–≤—É–∑–Ω–∞—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            time_str = f"{hour}:00"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            if self.is_time_booked(date, time_str):
                raise ValueError("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user_data[user_id].update({
                "hour": hour,
                "time": time_str
            })

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∏–Ω—É—Ç (2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
            keyboard = self.create_minutes_keyboard("minute")

            self.send_message(user_id, f"‚è∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ {time_str}. –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω—É—Ç—ã:", keyboard)
            user_states[user_id] = STATES['MINUTE_SELECTION']

        except ValueError as e:
            logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞: {e}")
            nearest = self.find_nearest_available_time(
                user_data[user_id]["date"],
                user_data[user_id].get("duration", 60)
            )
            if nearest:
                msg = (f"‚ùå –í—Ä–µ–º—è {hour_input}:00 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                       f"üîÑ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: {nearest}\n"
                       f"–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ?")

                keyboard = VkKeyboard(inline=True)
                keyboard.add_button("–î–∞", color=VkKeyboardColor.POSITIVE,
                                    payload={"button": f"accept_nearest_{nearest.replace(':', '')}"})
                keyboard.add_button("–ù–µ—Ç", color=VkKeyboardColor.NEGATIVE,
                                    payload={"button": "cancel_time_selection"})

                self.send_message(user_id, msg, keyboard)
            else:
                self.send_message(user_id,
                                  "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")

        except Exception as e:
            logger.error(f"[{user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            self.send_message(user_id, "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            self.reset_user_state(user_id)

    def create_minutes_keyboard(self, prefix):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç"""
        keyboard = VkKeyboard(inline=True)
        minutes = ["00", "15", "30", "45"]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
        for i in range(0, len(minutes), 2):
            # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –ø–∞—Ä–µ
            keyboard.add_button(minutes[i], color=VkKeyboardColor.PRIMARY,
                                payload={"button": f"{prefix}_{minutes[i]}"})

            # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if i + 1 < len(minutes):
                keyboard.add_button(minutes[i + 1], color=VkKeyboardColor.PRIMARY,
                                    payload={"button": f"{prefix}_{minutes[i + 1]}"})

            # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞
            if i + 2 < len(minutes):
                keyboard.add_line()

        return keyboard

    def is_time_booked(self, date, time, reservation_id=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç–æ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è"""
        conn = sqlite3.connect('reservations.db')
        cursor = conn.cursor()

        query = "SELECT id FROM reservations WHERE date = ? AND time = ?"
        params = [date, time]

        if reservation_id:
            query += " AND id != ?"
            params.append(reservation_id)

        cursor.execute(query, params)
        result = cursor.fetchone() is not None
        conn.close()

        return result

    def process_minute_selection(self, user_id, minute):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç"""
        try:
            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∏
            if isinstance(minute, dict) and "button" in minute:
                minute = minute["button"].split("_")[1]

            minute = minute.strip().zfill(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∏–Ω—É—Ç
            if minute not in ["00", "15", "30", "45"]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                keyboard = VkKeyboard(inline=True)
                keyboard.add_button("00", color=VkKeyboardColor.PRIMARY, payload={"button": f"minute_00"})
                keyboard.add_button("15", color=VkKeyboardColor.PRIMARY, payload={"button": f"minute_15"})
                keyboard.add_line()
                keyboard.add_button("30", color=VkKeyboardColor.PRIMARY, payload={"button": f"minute_30"})
                keyboard.add_button("45", color=VkKeyboardColor.PRIMARY, payload={"button": f"minute_45"})

                self.send_message(user_id,
                                  "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                                  keyboard)
                return False

            hour = user_data[user_id]["hour"]
            date = user_data[user_id]["date"]
            time = f"{hour}:{minute}"
            user_data[user_id]["time"] = time

            duration = user_data[user_id].get("duration", 60)
            start_time = datetime.strptime(time, "%H:%M")
            end_time = start_time + timedelta(minutes=duration)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
            reservations = get_reservations_for_date(date)
            for res in reservations:
                res_start = datetime.strptime(res[2], "%H:%M")
                res_end = res_start + timedelta(minutes=int(res[3]))

                if not (end_time <= res_start or start_time >= res_end):
                    # –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ
                    nearest_time = self.find_nearest_available_time(time, duration, reservations)
                    user_data[user_id]["time"] = nearest_time
                    self.send_message(user_id,
                                      f"‚ö†Ô∏è –í—Ä–µ–º—è {time} —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n"
                                      f"üîÑ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {nearest_time}")
                    self.show_duration_keyboard(user_id)
                    return True
            occupied_times = [res[2] for res in reservations]

            if time in occupied_times:
                nearest_time = self.find_nearest_available_time(time, 60, reservations)
                user_data[user_id]["time"] = nearest_time
                self.send_message(user_id,
                                  f"‚ö†Ô∏è –í—Ä–µ–º—è {time} —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n"
                                  f"üîÑ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ: {nearest_time}.\n")
                self.show_duration_keyboard(user_id)
            else:
                self.send_message(user_id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {time}.")
                self.show_duration_keyboard(user_id)

            return True

        except Exception as e:
            logger.error(f"Error in minute selection for user {user_id}: {str(e)}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω—É—Ç—ã –µ—â–µ —Ä–∞–∑.")
            return False

    def show_duration_keyboard(self, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        keyboard = VkKeyboard(inline=True)
        durations = ["30", "60", "120", "180"]

        for i, duration in enumerate(durations):
            keyboard.add_button(f"{duration} –º–∏–Ω", color=VkKeyboardColor.PRIMARY,
                                payload={"button": f"duration_{duration}"})
            if i < len(durations) - 1:
                keyboard.add_line()  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

        self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", keyboard)
        user_states[user_id] = STATES['DURATION_SELECTION']

    def process_duration_input(self, user_id, duration_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é)"""
        try:
            # –ï—Å–ª–∏ duration_input –ø—Ä–∏—à–ª–æ –∏–∑ payload (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
            if isinstance(duration_input, dict) and "button" in duration_input:
                duration = duration_input["button"].split("_")[1]
            else:
                duration = duration_input.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if duration not in ["60", "120", "180"]:
                self.show_duration_keyboard(user_id)
                return

            user_data[user_id]['duration'] = int(duration)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
            self.send_message(user_id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            user_states[user_id] = STATES['AUTHOR_NAME']

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            self.show_duration_keyboard(user_id)

    def process_author_name(self, user_id, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞"""
        author_name = text.strip()
        user_data[user_id]["author_name"] = author_name

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        self.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        user_states[user_id] = STATES['EVENT_NAME']

    def process_event_name(self, user_id, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        event_name = text.strip()
        user_data[user_id]['event_name'] = event_name

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        author_name = user_data[user_id].get('author_name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        date = user_data[user_id]['date']
        time = user_data[user_id]['time']
        duration = user_data[user_id].get('duration', 60)

        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if add_reservation(user_id, f"vk{user_id}", author_name, event_name, date, time, duration):
            self.send_message(user_id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", self.get_main_keyboard())
        else:
            self.send_message(user_id, "‚ö†Ô∏è –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.", self.get_main_keyboard())

        user_states[user_id] = STATES['START']

    def show_my_reservations(self, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        try:
            reservations = get_reservations_for_user(user_id)

            if not reservations:
                self.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.", self.get_main_keyboard())
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            message = "üìÖ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            for i, res in enumerate(reservations, 1):
                message += f"{i}. {res[4]} - {res[2]}: {res[3]}\n–ê–≤—Ç–æ—Ä: {res[1]}\n–í—Ä–µ–º—è: {res[5]}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {res[6]} –º–∏–Ω\n\n"

            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ VK API)
            MAX_RESERVATIONS_PER_KEYBOARD = 5

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫
            first_part = reservations[:MAX_RESERVATIONS_PER_KEYBOARD]
            keyboard = VkKeyboard(inline=True)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            for i, res in enumerate(first_part, 1):
                keyboard.add_button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {i}", color=VkKeyboardColor.PRIMARY,
                                    payload={"button": f"edit_booking_{res[0]}"})
                keyboard.add_button(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {i}", color=VkKeyboardColor.NEGATIVE,
                                    payload={"button": f"cancel_confirm_{res[0]}"})
                if i < len(first_part):
                    keyboard.add_line()

            # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
            if len(reservations) > MAX_RESERVATIONS_PER_KEYBOARD:
                keyboard.add_line()
                keyboard.add_button("–î–∞–ª–µ–µ ‚Üí", color=VkKeyboardColor.SECONDARY,
                                    payload={"action": "show_more_reservations",
                                             "offset": MAX_RESERVATIONS_PER_KEYBOARD})

            keyboard.add_line()
            keyboard.add_button("–ù–∞–∑–∞–¥", color=VkKeyboardColor.SECONDARY,
                                payload={"action": "main_menu"})

            self.send_message(user_id, message, keyboard)
            user_states[user_id] = STATES['VIEW_RESERVATIONS']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                              self.get_main_keyboard())

    def show_all_reservations(self, user_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_data:
                user_data[user_id] = {}

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –º–µ—Å—è—Ü–µ–≤
            keyboard = VkKeyboard(inline=True)
            keyboard.add_button("–Ø–Ω–≤–∞—Ä—å-–ê–ø—Ä–µ–ª—å", color=VkKeyboardColor.PRIMARY,
                                payload={"action": "schedule_month_period", "period": "1_4"})
            keyboard.add_button("–ú–∞–π-–ê–≤–≥—É—Å—Ç", color=VkKeyboardColor.PRIMARY,
                                payload={"action": "schedule_month_period", "period": "5_8"})
            keyboard.add_line()
            keyboard.add_button("–°–µ–Ω—Ç—è–±—Ä—å-–î–µ–∫–∞–±—Ä—å", color=VkKeyboardColor.PRIMARY,
                                payload={"action": "schedule_month_period", "period": "9_12"})
            keyboard.add_line()
            keyboard.add_button("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", color=VkKeyboardColor.POSITIVE,
                                payload={"action": "schedule_current_month"})
            keyboard.add_button("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.SECONDARY,
                                payload={"action": "main_menu"})

            self.send_message(user_id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", keyboard)
            user_states[user_id] = STATES['SCHEDULE_MONTH_PERIOD']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –º–µ—Å—è—Ü–µ–≤: {e}")
            self.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def process_schedule_month_period(self, user_id, period):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            if period == "current":
                now = datetime.now()
                self.process_schedule_month_selection(user_id, {"month": now.month, "year": now.year})
                return

            start_month, end_month = map(int, period.split('_'))
            current_year = datetime.now().year
            current_month = datetime.now().month

            keyboard = VkKeyboard(inline=True)
            for month in range(start_month, end_month + 1):
                # –î–ª—è –º–µ—Å—è—Ü–µ–≤ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
                if month >= current_month:
                    month_name = self.get_month_name(str(month).zfill(2))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç "01", "02" –∏ —Ç.–¥.
                    keyboard.add_button(month_name, color=VkKeyboardColor.PRIMARY,
                                        payload={"action": "schedule_select_month",
                                                 "month": month, "year": current_year})
                # –î–ª—è –º–µ—Å—è—Ü–µ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
                else:
                    month_name = f"{self.get_month_name(str(month).zfill(2))} ({current_year + 1})"
                    keyboard.add_button(month_name, color=VkKeyboardColor.SECONDARY,
                                        payload={"action": "schedule_select_month",
                                                 "month": month, "year": current_year + 1})

                if (month - start_month) % 2 == 1 and month != end_month:
                    keyboard.add_line()

            keyboard.add_line()
            keyboard.add_button("–ù–∞–∑–∞–¥ –∫ –ø–µ—Ä–∏–æ–¥–∞–º", color=VkKeyboardColor.SECONDARY,
                                payload={"action": "show_all_reservations"})

            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü:", keyboard)
            user_states[user_id] = STATES['SCHEDULE_MONTH_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –µ—â–µ —Ä–∞–∑.")

    def process_schedule_month_selection(self, user_id, month_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –¥–Ω–µ–π"""
        try:
            month = int(month_data["month"])
            year = int(month_data["year"])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
            user_data[user_id] = {
                "schedule_month": f"{month:02d}",
                "schedule_year": str(year)
            }

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–Ω–µ–π
            _, num_days = monthrange(year, month)
            period_size = max(1, num_days // 4)
            periods = []

            for i in range(4):
                start_day = i * period_size + 1
                end_day = (i + 1) * period_size if i < 3 else num_days
                periods.append((start_day, end_day))

            keyboard = VkKeyboard(inline=True)
            for i, (start, end) in enumerate(periods):
                btn_text = f"{start}-{end}" if start != end else f"{start}"
                keyboard.add_button(btn_text, color=VkKeyboardColor.PRIMARY,
                                    payload={"action": "schedule_day_period",
                                             "start": start, "end": end})

                if i % 2 == 1 and i != len(periods) - 1:
                    keyboard.add_line()

            keyboard.add_line()
            keyboard.add_button("–ù–∞–∑–∞–¥ –∫ –º–µ—Å—è—Ü–∞–º", color=VkKeyboardColor.SECONDARY,
                                payload={"action": "show_all_reservations"})

            month_name = self.get_month_name(month)
            self.send_message(user_id,
                              f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω–µ–π ({month_name} {year}):",
                              keyboard)
            user_states[user_id] = STATES['SCHEDULE_DAY_PERIOD']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—è—Ü–∞: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –µ—â–µ —Ä–∞–∑")

    def process_schedule_day_period(self, user_id, period_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            start_day = int(period_data["start"])
            end_day = int(period_data["end"])
            month = int(user_data[user_id]["schedule_month"])
            year = int(user_data[user_id]["schedule_year"])

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
            available_days = []
            for day in range(start_day, end_day + 1):
                date = f"{year}-{month:02d}-{day:02d}"
                reservations = get_reservations_for_date(date)
                if reservations:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
                    available_days.append(day)

            if not available_days:
                self.send_message(user_id, "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç –¥–Ω–µ–π —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏
            keyboard = VkKeyboard(inline=True)
            for i, day in enumerate(available_days):
                keyboard.add_button(str(day), color=VkKeyboardColor.PRIMARY,
                                    payload={"action": "schedule_select_day", "day": day})

                if (i + 1) % 4 == 0 and i != len(available_days) - 1:
                    keyboard.add_line()

            keyboard.add_line()
            keyboard.add_button("–ù–∞–∑–∞–¥ –∫ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω–µ–π", color=VkKeyboardColor.SECONDARY,
                                payload={"action": "schedule_back_to_day_periods"})

            month_name = self.get_month_name(month)
            self.send_message(user_id,
                              f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å ({month_name} {year}):",
                              keyboard)
            user_states[user_id] = STATES['SCHEDULE_DAY_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–Ω–µ–π: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –µ—â–µ —Ä–∞–∑")

    def process_schedule_day_selection(self, user_id, day):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        try:
            day = int(day)
            month = int(user_data[user_id]["schedule_month"])
            year = int(user_data[user_id]["schedule_year"])
            date = f"{year}-{month:02d}-{day:02d}"

            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('reservations.db')
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, username, author_name, event_name, date, time, duration
                FROM reservations
                WHERE date = ?
                ORDER BY time
            """, (date,))
            reservations = cursor.fetchall()
            conn.close()

            if not reservations:
                self.send_message(user_id, f"‚ùå –ù–∞ {day}.{month:02d}.{year} –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}.{month:02d}.{year}:\n\n"
            for i, res in enumerate(reservations, 1):
                message += (
                    f"{i}. {res[4]} - {res[2]}: {res[3]}\n"
                    f"–ê–≤—Ç–æ—Ä: {res[1]}\n"
                    f"–í—Ä–µ–º—è: {res[5]}\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {res[6]} –º–∏–Ω\n\n"
                )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = VkKeyboard(inline=True)
            keyboard.add_button("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", color=VkKeyboardColor.PRIMARY,
                                payload={"action": "schedule_back_to_days"})
            keyboard.add_line()
            keyboard.add_button("–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", color=VkKeyboardColor.PRIMARY,
                                payload={"action": "show_all_reservations"})
            keyboard.add_button("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.SECONDARY,
                                payload={"action": "main_menu"})

            self.send_message(user_id, message, keyboard)
            user_states[user_id] = STATES['START']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            self.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def process_month_for_view(self, user_id, month):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_data:
                user_data[user_id] = {}

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
            month = int(month)
            user_data[user_id]["view_month"] = f"{month:02d}"
            year = int(user_data[user_id].get("view_year", str(datetime.now().year)))

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –º–µ—Å—è—Ü–∞
            keyboard = self.get_days_keyboard(user_id, year, month, "day")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard.add_line()
            keyboard.add_button("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "show_all_reservations"})
            keyboard.add_button("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.SECONDARY,
                                payload={"button": "main_menu"})

            month_name = self.get_month_name(month)
            self.send_message(user_id, f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å ({month_name} {year}):", keyboard)
            user_states[user_id] = STATES['SELECT_DAY']

        except ValueError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞ {month}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü –µ—â–µ —Ä–∞–∑")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def process_day_for_view(self, user_id, day):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_data:
                user_data[user_id] = {}

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å
            day = day.zfill(2) if len(day) == 1 else day
            year = user_data[user_id].get("view_year", str(datetime.now().year))
            month = user_data[user_id].get("view_month", f"{datetime.now().month:02d}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            try:
                selected_date = f"{year}-{month}-{day}"
                datetime.strptime(selected_date, "%Y-%m-%d")
            except ValueError:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")

            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            reservations = get_reservations_for_date(selected_date)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            time_slots = [
                "05:00", "05:30", "06:00", "06:30", "07:00", "07:30",
                "08:00", "08:30", "09:00", "09:30", "10:00", "10:30",
                "11:00", "11:30", "12:00", "12:30", "13:00", "13:30",
                "14:00", "14:30", "15:00", "15:30", "16:00", "16:30",
                "17:00", "17:30", "18:00", "18:30", "19:00", "19:30"
            ]

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
            occupied_slots = {}
            for res in reservations:
                _, _, author, event, _, time_str, duration = res
                try:
                    start_time = datetime.strptime(time_str, "%H:%M")
                    duration = int(duration) if duration else 60
                    end_time = start_time + timedelta(minutes=duration)

                    current_time = start_time
                    while current_time < end_time:
                        slot_key = current_time.strftime("%H:%M")
                        if slot_key not in occupied_slots:
                            occupied_slots[slot_key] = []
                        occupied_slots[slot_key].append(
                            f"{event} ({author}, {duration} –º–∏–Ω)"
                        )
                        current_time += timedelta(minutes=30)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏ {time_str}: {e}")
                    continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            formatted_date = f"{day}.{month}.{year}"
            message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {formatted_date}:\n\n"

            for slot in time_slots:
                if slot in occupied_slots:
                    message += f"üïí {slot} - üü• –ó–ê–ù–Ø–¢–û\n"
                    for detail in occupied_slots[slot]:
                        message += f"   ‚Ä¢ {detail}\n"
                else:
                    message += f"üïí {slot} - üü© –°–í–û–ë–û–î–ù–û\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = VkKeyboard(inline=True)
            keyboard.add_button("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", color=VkKeyboardColor.PRIMARY,
                                payload={"button": f"mo_{month}"})
            keyboard.add_line()
            keyboard.add_button("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "show_all_reservations"})
            keyboard.add_line()
            keyboard.add_button("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.SECONDARY,
                                payload={"button": "main_menu"})

            self.send_message(user_id, message, keyboard)
            user_states[user_id] = STATES['START']

        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", self.get_main_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            self.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                              self.get_main_keyboard())
            user_states[user_id] = STATES['START']

    def process_cancel_confirmation(self, user_id, reservation_id):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_data[user_id]["cancel_reservation_id"] = reservation_id

        keyboard = VkKeyboard(inline=True)
        keyboard.add_button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", color=VkKeyboardColor.POSITIVE,
                            payload={"button": f"confirm_cancel_{reservation_id}"})
        keyboard.add_button("‚ùå –û—Ç–º–µ–Ω–∞", color=VkKeyboardColor.NEGATIVE,
                            payload={"button": "cancel_cancel"})

        self.send_message(user_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å?", keyboard)

    def process_confirm_cancel(self, user_id, reservation_id):
        """–£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        success = delete_reservation(reservation_id)

        if success:
            self.send_message(user_id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", self.get_main_keyboard())
        else:
            self.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –±—Ä–æ–Ω—å —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", self.get_main_keyboard())

    def find_nearest_available_time(self, date, duration):
        """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        try:
            reservations = get_reservations_for_date(date)
            booked_slots = []

            for res in reservations:
                try:
                    time_str = res[2]
                    res_duration = int(res[3]) if len(res) > 3 else 60
                    start = datetime.strptime(time_str, "%H:%M")
                    booked_slots.append((
                        start.hour * 60 + start.minute,
                        start.hour * 60 + start.minute + res_duration
                    ))
                except:
                    continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∞—Å—ã (—Å 5:00 –¥–æ 20:00)
            for hour in range(5, 21):
                for minute in [0, 15, 30, 45]:
                    start_min = hour * 60 + minute
                    end_min = start_min + duration

                    if all(end_min <= bs[0] or start_min >= bs[1] for bs in booked_slots):
                        return f"{hour:02d}:{minute:02d}"

            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return None

    def process_edit_selection(self, user_id, booking_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        user_data[user_id] = {
            'edit_reservation_id': booking_id,
            'edit_state': 'selection'
        }

        keyboard = VkKeyboard(inline=True)
        buttons = [
            ("üìÖ –î–∞—Ç–∞", "edit_date"),
            ("‚è∞ –í—Ä–µ–º—è", "edit_time"),
            ("üë§ –ò–º—è", "edit_author"),
            ("üìå –°–æ–±—ã—Ç–∏–µ", "edit_event"),
            ("üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "edit_duration"),
            ("‚ùå –û—Ç–º–µ–Ω–∞", "edit_cancel")
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for i, (text, action) in enumerate(buttons):
            if i % 2 == 0 and i != 0:
                keyboard.add_line()
            keyboard.add_button(text, color=VkKeyboardColor.PRIMARY,
                                payload={"button": action})

        self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:", keyboard)
        user_states[user_id] = STATES['EDIT_SELECTION']

    def process_edit_date(self, user_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã"""
        user_data[user_id].update({
            'edit_field': 'date',
            'edit_state': 'date_selection'
        })

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –º–µ—Å—è—Ü–µ–≤ (–Ω–µ –±–æ–ª–µ–µ 2 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ)
        keyboard = VkKeyboard(inline=True)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        keyboard.add_button("–Ø–Ω–≤–∞—Ä—å-–ê–ø—Ä–µ–ª—å",
                            color=VkKeyboardColor.PRIMARY,
                            payload={"button": "edit_month_period_1_4"})
        keyboard.add_button("–ú–∞–π-–ê–≤–≥—É—Å—Ç",
                            color=VkKeyboardColor.PRIMARY,
                            payload={"button": "edit_month_period_5_8"})
        keyboard.add_line()
        keyboard.add_button("–°–µ–Ω—Ç—è–±—Ä—å-–î–µ–∫–∞–±—Ä—å",
                            color=VkKeyboardColor.PRIMARY,
                            payload={"button": "edit_month_period_9_12"})

        self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤:", keyboard)
        user_states[user_id] = STATES['EDIT_DATE_SELECTION']

    def process_edit_month_period_selection(self, user_id, period):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤"""
        try:
            period_map = {
                "edit_month_period_1_4": [1, 2, 3, 4],
                "edit_month_period_5_8": [5, 6, 7, 8],
                "edit_month_period_9_12": [9, 10, 11, 12]
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–∏–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º
            if period not in period_map:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤: {period}")

            current_year = datetime.now().year
            current_month = datetime.now().month

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞–º–∏
            keyboard = VkKeyboard(inline=True)
            for i, month in enumerate(period_map[period]):
                year = current_year + 1 if month < current_month else current_year
                month_name = self.get_month_name(month)

                keyboard.add_button(f"{month_name} {year}" if year > current_year else month_name,
                                    color=VkKeyboardColor.PRIMARY,
                                    payload={"button": f"edit_select_month_{month}_{year}"})

                if i % 2 == 1 and i != len(period_map[period]) - 1:
                    keyboard.add_line()

            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü:", keyboard)
            user_states[user_id] = STATES['EDIT_MONTH_SELECTION']

        except ValueError as e:
            logger.error(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤: {period}")
            self.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                              self.get_main_keyboard())
        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –µ—â–µ —Ä–∞–∑.",
                              self.get_main_keyboard())

    def process_edit_month_selection(self, user_id, month_data):
        try:
            month = month_data["month"]
            year = month_data["year"]

            logger.info(f"[{user_id}] –í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {month}, –≥–æ–¥: {year}")  # –õ–æ–≥–∏—Ä—É–µ–º

            user_data[user_id].update({
                'edit_month': int(month),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
                'edit_year': int(year)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
            })

            self.send_message(user_id, f"üìÖ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞:")
            user_states[user_id] = STATES['EDIT_DAY_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –≤ process_edit_month_selection: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.reset_user_state(user_id)

    def process_edit_day_selection(self, user_id, day_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–Ω—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            day = int(day_input)
            month = int(user_data[user_id]["edit_month"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            year = int(user_data[user_id]["edit_year"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–Ω—è
            _, last_day = monthrange(year, month)  # –¢–µ–ø–µ—Ä—å month - —á–∏—Å–ª–æ
            if day < 1 or day > last_day:
                self.send_message(user_id, f"‚ùå –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –¥–Ω–µ–π –æ—Ç 1 –¥–æ {last_day}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É (–¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏)
            new_date = f"{year}-{month:02d}-{day:02d}"

            # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –ø–æ—Ç–æ–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            if user_data[user_id].get("edit_state") == "time_edit_flow":
                user_data[user_id]["new_date"] = new_date
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
                self.show_edit_time_options(user_id)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                reservation_id = user_data[user_id]["edit_reservation_id"]
                if update_reservation(reservation_id, {'date': new_date}):
                    self.send_message(user_id, f"‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_date}!",
                                      self.get_main_keyboard())
                else:
                    raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã")
                self.reset_user_state(user_id)

        except ValueError:
            self.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).")
        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–Ω—è: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                              self.get_main_keyboard())
            self.reset_user_state(user_id)

    def process_edit_time(self, user_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            reservation_id = user_data[user_id]["edit_reservation_id"]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            conn = sqlite3.connect('reservations.db')
            cursor = conn.cursor()
            cursor.execute("SELECT date, time FROM reservations WHERE id = ?", (reservation_id,))
            result = cursor.fetchone()
            conn.close()

            if not result:
                raise Exception("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            current_date, current_time = result

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_data[user_id].update({
                'edit_field': 'time',
                'edit_state': 'time_edit_flow',  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                'original_date': current_date,
                'original_time': current_time,
                'new_date': current_date,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                'new_time': None
            })

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É
            keyboard = VkKeyboard(inline=True)
            keyboard.add_button("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "edit_time_change_date"})
            keyboard.add_line()
            keyboard.add_button("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É", color=VkKeyboardColor.SECONDARY,
                                payload={"button": "edit_time_keep_date"})

            self.send_message(user_id,
                              f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}\n"
                              f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è?",
                              keyboard)
            user_states[user_id] = STATES['EDIT_TIME_DATE_CHOICE']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
                              self.get_main_keyboard())
            self.reset_user_state(user_id)

    def show_edit_month_periods(self, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
        try:
            keyboard = VkKeyboard(inline=True)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ –≤ process_edit_date
            keyboard.add_button("–Ø–Ω–≤–∞—Ä—å-–ê–ø—Ä–µ–ª—å", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "edit_month_period_1_4"})
            keyboard.add_line()
            keyboard.add_button("–ú–∞–π-–ê–≤–≥—É—Å—Ç", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "edit_month_period_5_8"})
            keyboard.add_line()
            keyboard.add_button("–°–µ–Ω—Ç—è–±—Ä—å-–î–µ–∫–∞–±—Ä—å", color=VkKeyboardColor.PRIMARY,
                                payload={"button": "edit_month_period_9_12"})

            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤:", keyboard)
            user_states[user_id] = STATES['EDIT_DATE_SELECTION']
        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –º–µ—Å—è—Ü–µ–≤: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –º–µ—Å—è—Ü–µ–≤.")
            self.reset_user_state(user_id)

    def process_edit_time_date_choice(self, user_id, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if choice == "edit_time_change_date":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                user_data[user_id]["edit_state"] = "time_edit_flow"
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ
                if "edit_date" in user_data[user_id]:
                    del user_data[user_id]["edit_date"]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
                self.show_edit_month_periods(user_id)

            elif choice == "edit_time_keep_date":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
                self.show_edit_time_options(user_id)

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                              self.get_main_keyboard())
            self.reset_user_state(user_id)

    def process_edit_date_selection(self, user_id, button):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤"""
        try:
            periods = {
                "edit_month_period_1_4": ["01", "02", "03", "04"],
                "edit_month_period_5_8": ["05", "06", "07", "08"],
                "edit_month_period_9_12": ["09", "10", "11", "12"]
            }

            if button not in periods:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤")

            current_year = datetime.now().year
            current_month = datetime.now().month

            keyboard = VkKeyboard(inline=True)
            months = periods[button]

            for i in range(0, len(months), 2):
                month1 = months[i]
                month_name1 = self.get_month_name(int(month1))
                year = current_year + 1 if int(month1) < current_month else current_year
                keyboard.add_button(month_name1, color=VkKeyboardColor.PRIMARY,
                                    payload={"button": f"edit_select_month_{month1}_{year}"})

                if i + 1 < len(months):
                    month2 = months[i + 1]
                    month_name2 = self.get_month_name(int(month2))
                    year = current_year + 1 if int(month2) < current_month else current_year
                    keyboard.add_button(month_name2, color=VkKeyboardColor.PRIMARY,
                                        payload={"button": f"edit_select_month_{month2}_{year}"})

                if i + 2 < len(months):
                    keyboard.add_line()

            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", keyboard)
            user_states[user_id] = STATES['EDIT_MONTH_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Å—è—Ü–µ–≤: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                              self.get_main_keyboard())
            self.reset_user_state(user_id)

    def get_month_name(self, month_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –Ω–æ–º–µ—Ä—É (—Ñ–æ—Ä–º–∞—Ç '01'-'12')"""
        try:
            month_num = int(month_num)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
            months = {
                1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
                5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
                9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
            }
            return months.get(month_num, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü")
        except (ValueError, TypeError):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü"

    def process_edit_date_success(self, user_id):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã"""
        try:
            # Store the edited date in user_data
            user_data[user_id]["new_date"] = user_data[user_id].get("edit_date")

            # Set the state to indicate we're in time editing flow
            user_data[user_id]["edit_state"] = "time_edit_flow"

            # Continue with time editing
            self.show_edit_time_options(user_id)
        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã.",
                              self.get_main_keyboard())
            self.reset_user_state(user_id)

    def show_edit_time_options(self, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            date = user_data[user_id]["new_date"]
            reservation_id = user_data[user_id]["edit_reservation_id"]

            # Get booked time slots (excluding current reservation)
            conn = sqlite3.connect('reservations.db')
            cursor = conn.cursor()
            cursor.execute("""
                SELECT time, duration FROM reservations 
                WHERE date = ? AND id != ?
            """, (date, reservation_id))
            booked_slots = cursor.fetchall()
            conn.close()

            # Create list of booked intervals
            booked_intervals = []
            for time, duration in booked_slots:
                start = datetime.strptime(time, "%H:%M")
                start_minutes = start.hour * 60 + start.minute
                end_minutes = start_minutes + int(duration)
                booked_intervals.append((start_minutes, end_minutes))

            # Check available hours (5:00 - 20:00)
            available_hours = []
            for hour in range(5, 20):
                start_minutes = hour * 60
                end_minutes = start_minutes + 60  # minimum duration 60 min

                # Check overlap with existing bookings
                is_available = True
                for booked_start, booked_end in booked_intervals:
                    if not (end_minutes <= booked_start or start_minutes >= booked_end):
                        is_available = False
                        break

                if is_available:
                    available_hours.append(f"{hour:02d}")

            if not available_hours:
                self.send_message(user_id, "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
                return

            user_data[user_id]["available_hours"] = available_hours

            # Create keyboard with time periods
            keyboard = VkKeyboard(inline=True)
            periods = [
                ("5:00-8:00", {"button": "edit_time_period_5_8"}),  # –§–æ—Ä–º–∞—Ç edit_time_period_X_Y
                ("9:00-12:00", {"button": "edit_time_period_9_12"}),
                ("13:00-16:00", {"button": "edit_time_period_13_16"}),
                ("17:00-20:00", {"button": "edit_time_period_17_20"})
            ]

            # Place 2 buttons per row
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É)
            for i in range(0, len(periods), 2):
                text1, payload1 = periods[i]
                keyboard.add_button(text1, color=VkKeyboardColor.PRIMARY, payload=payload1)

                if i + 1 < len(periods):
                    text2, payload2 = periods[i + 1]
                    keyboard.add_button(text2, color=VkKeyboardColor.PRIMARY, payload=payload2)

                if i + 2 < len(periods):
                    keyboard.add_line()

            self.send_message(user_id, f"üïí –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {date}:", keyboard)
            user_states[user_id] = STATES['EDIT_TIME_PERIOD_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            self.reset_user_state(user_id)

    def show_edit_time_periods(self, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            date = user_data[user_id]["edit_date"]
            reservation_id = user_data[user_id]["edit_reservation_id"]

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            conn = sqlite3.connect('reservations.db')
            cursor = conn.cursor()
            cursor.execute("""
                SELECT time, duration FROM reservations 
                WHERE date = ? AND id != ?
            """, (date, reservation_id))
            reservations = cursor.fetchall()
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
            booked_slots = []
            for time, duration in reservations:
                start = datetime.strptime(time, "%H:%M")
                start_minutes = start.hour * 60 + start.minute
                end_minutes = start_minutes + int(duration)
                booked_slots.append((start_minutes, end_minutes))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã
            available_hours = []
            for hour in range(5, 20):
                start_minutes = hour * 60
                end_minutes = start_minutes + 60  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
                is_available = True
                for booked_start, booked_end in booked_slots:
                    if not (end_minutes <= booked_start or start_minutes >= booked_end):
                        is_available = False
                        break

                if is_available:
                    available_hours.append(f"{hour:02d}")

            if not available_hours:
                self.send_message(user_id, "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
                return

            user_data[user_id]["edit_available_hours"] = available_hours

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
            keyboard = VkKeyboard(inline=True)
            periods = [
                ("5-8", "edit_hour_period_5_8"),
                ("9-12", "edit_hour_period_9_12"),
                ("13-16", "edit_hour_period_13_16"),
                ("17-19", "edit_hour_period_17_19")
            ]

            for i, (text, action) in enumerate(periods):
                if i % 2 == 0 and i != 0:
                    keyboard.add_line()
                keyboard.add_button(text, color=VkKeyboardColor.PRIMARY,
                                    payload={"button": action})

            self.send_message(user_id, f"üïí –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {date}:", keyboard)
            user_states[user_id] = STATES['EDIT_HOUR_PERIOD_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                              self.get_main_keyboard())

    def process_edit_hour_period_selection(self, user_id, period):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —á–∞—Å–æ–≤ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            if isinstance(period, dict) and 'button' in period:
                button = period['button']
                if button.startswith('edit_hour_period_'):
                    parts = button.split('_')
                    start = int(parts[3])
                    end = int(parts[4])

                    available_hours = user_data[user_id]["edit_available_hours"]
                    hours_in_period = [f"{h:02d}" for h in range(start, end + 1)
                                       if f"{h:02d}" in available_hours]

                    if not hours_in_period:
                        self.send_message(user_id, "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤.")
                        return

                    keyboard = VkKeyboard(inline=True)
                    for i, hour in enumerate(hours_in_period):
                        keyboard.add_button(hour, color=VkKeyboardColor.PRIMARY,
                                            payload={"button": f"edit_hour_{hour}"})
                        if (i + 1) % 3 == 0 and i != len(hours_in_period) - 1:
                            keyboard.add_line()

                    self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", keyboard)
                    user_states[user_id] = STATES['EDIT_HOUR_SELECTION']
                else:
                    self.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞.")
            else:
                self.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞ —á–∞—Å–æ–≤: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def process_edit_hour_selection(self, user_id, payload):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            logger.debug(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω payload: {payload}")

            if not payload or not isinstance(payload, dict) or 'button' not in payload:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")

            button = payload['button']

            if not button.startswith('edit_hour_'):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏ —á–∞—Å–∞")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏–∑ –∫–Ω–æ–ø–∫–∏
            hour = button.split('_')[-1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–∞
            if not hour.isdigit() or len(hour) != 2:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–∞")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å
            user_data[user_id]["edit_hour"] = hour
            logger.debug(f"[{user_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω —á–∞—Å: {hour}")

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            if "edit_date" not in user_data[user_id] and "new_date" in user_data[user_id]:
                user_data[user_id]["edit_date"] = user_data[user_id]["new_date"]

            if "edit_date" not in user_data[user_id]:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∏–Ω—É—Ç–∞–º–∏
            self._show_minute_keyboard(user_id)

        except ValueError as e:
            logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            self.send_message(user_id, f"‚ùå {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.error(f"[{user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            self.send_message(user_id, "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            self.reset_user_state(user_id)

    def process_edit_time_period_selection(self, user_id, payload):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        logger.debug(f"[{user_id}] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(user_id)}")

        try:
            if not payload or 'button' not in payload:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")

            button = payload['button']
            logger.debug(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {button}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏

            if not button.startswith('edit_time_period_'):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–∏–æ–¥–∞")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: edit_time_period_5_8)
            _, _, _, start_str, end_str = button.split('_')
            start_hour = int(start_str)
            end_hour = int(end_str)

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            available_hours = user_data[user_id]["available_hours"]
            hours_in_period = [h for h in available_hours
                               if start_hour <= int(h) <= end_hour]

            if not hours_in_period:
                self.send_message(user_id, "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
            keyboard = VkKeyboard(inline=True)
            for i, hour in enumerate(hours_in_period):
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ hour - —Å—Ç—Ä–æ–∫–∞ —Å –¥–≤—É–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º
                if not isinstance(hour, str) or not hour.isdigit():
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å –≤ available_hours: {hour}")
                    continue

                keyboard.add_button(
                    hour,
                    color=VkKeyboardColor.PRIMARY,
                    payload={"button": f"edit_hour_{hour}"}  # –§–æ—Ä–º–∞—Ç: edit_hour_09
                )
                if (i + 1) % 3 == 0 and i != len(hours_in_period) - 1:
                    keyboard.add_line()

            self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", keyboard)
            user_states[user_id] = STATES['EDIT_HOUR_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            user_states[user_id] = STATES['START']

    def process_edit_time_hour_selection(self, user_id, payload):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            logger.debug(f"[{user_id}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞, payload: {payload}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É payload
            if not payload or not isinstance(payload, dict) or 'button' not in payload:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")

            button = payload['button']
            logger.debug(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏ —á–∞—Å–∞
            if not button.startswith('edit_hour_'):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏ —á–∞—Å–∞")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏–∑ –∫–Ω–æ–ø–∫–∏
            hour = button.split('_')[-1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–∞
            if not hour.isdigit() or len(hour) != 2:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–∞")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å
            user_data[user_id]["edit_hour"] = hour
            logger.debug(f"[{user_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω —á–∞—Å: {hour}")

            # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –º–∏–Ω—É—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
            self.send_message(
                user_id,
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å {hour}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã (00, 15, 30 –∏–ª–∏ 45):",
                self.get_cancel_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            )
            user_states[user_id] = STATES['EDIT_TIME_MINUTE_SELECTION']

        except ValueError as e:
            logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            self.send_message(
                user_id,
                f"‚ùå {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å —Å–Ω–æ–≤–∞.",
                self.get_hour_keyboard()
            )

        except Exception as e:
            logger.error(f"[{user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            self.send_message(
                user_id,
                "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                self.get_main_keyboard()
            )
            self.reset_user_state(user_id)

    def process_edit_time_minute_selection(self, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç"""
        try:
            logger.debug(f"[{user_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç: {text}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã
            minute = text.strip()
            if minute not in ["00", "15", "30", "45"]:
                raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–∏–Ω—É—Ç: 00, 15, 30 –∏–ª–∏ 45")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            required_keys = ["edit_hour", "new_date", "edit_reservation_id"]
            if not all(key in user_data.get(user_id, {}) for key in required_keys):
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
            hour = user_data[user_id]["edit_hour"]
            date = user_data[user_id]["new_date"]
            reservation_id = user_data[user_id]["edit_reservation_id"]
            new_time = f"{hour}:{minute}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            conn = sqlite3.connect('reservations.db')
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id FROM reservations 
                WHERE date = ? AND time = ? AND id != ?
            """, (date, new_time, reservation_id))

            if cursor.fetchone():
                conn.close()
                raise ValueError(f"–í—Ä–µ–º—è {new_time} —É–∂–µ –∑–∞–Ω—è—Ç–æ")

            # –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            cursor.execute("""
                UPDATE reservations 
                SET time = ?
                WHERE id = ?
            """, (new_time, reservation_id))
            conn.commit()
            conn.close()

            self.send_message(
                user_id,
                f"‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time}",
                self.get_main_keyboard()
            )
            self.reset_user_state(user_id)

        except ValueError as e:
            logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            self.send_message(
                user_id,
                f"‚ùå {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã —Å–Ω–æ–≤–∞ (00, 15, 30 –∏–ª–∏ 45):",
                self.get_cancel_keyboard()
            )

        except Exception as e:
            logger.error(f"[{user_id}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            self.send_message(
                user_id,
                "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                self.get_main_keyboard()
            )
            self.reset_user_state(user_id)

    def _show_minute_keyboard(self, user_id, message="–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:"):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç"""
        try:
            keyboard = VkKeyboard(inline=True)
            minutes = ["00", "15", "30", "45"]

            for i, minute in enumerate(minutes):
                if i % 2 == 0 and i != 0:
                    keyboard.add_line()
                keyboard.add_button(
                    minute,
                    color=VkKeyboardColor.PRIMARY,
                    payload={"button": f"edit_minute_{minute}"}
                )

            self.send_message(user_id, message, keyboard)
            user_states[user_id] = STATES['EDIT_MINUTE_SELECTION']

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–∏–Ω—É—Ç: {str(e)}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç.")
            self.reset_user_state(user_id)

    def process_edit_minute_selection(self, user_id, minute_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç"""
        try:
            logger.debug(f"[{user_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç: {minute_input}")

            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç—ã –∏–∑ –≤–≤–æ–¥–∞
            if isinstance(minute_input, dict) and "button" in minute_input:
                minute = minute_input["button"].split("_")[-1]
            else:
                minute = minute_input.strip().zfill(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∏–Ω—É—Ç
            if minute not in ["00", "15", "30", "45"]:
                raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (00, 15, 30, 45)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            required_keys = ["edit_hour", "edit_reservation_id"]
            if not all(key in user_data.get(user_id, {}) for key in required_keys):
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É (–ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞)
            date = user_data[user_id].get("edit_date") or user_data[user_id].get("new_date")
            if not date:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")

            hour = user_data[user_id]["edit_hour"]
            new_time = f"{hour}:{minute}"
            reservation_id = user_data[user_id]["edit_reservation_id"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            conn = sqlite3.connect('reservations.db')
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id FROM reservations 
                WHERE date = ? AND time = ? AND id != ?
            """, (date, new_time, reservation_id))
            if cursor.fetchone():
                conn.close()
                raise Exception("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")

            # –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            cursor.execute("""
                UPDATE reservations 
                SET date = ?, time = ?
                WHERE id = ?
            """, (date, new_time, reservation_id))
            conn.commit()
            conn.close()

            self.send_message(user_id,
                              f"‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n"
                              f"üìÖ –î–∞—Ç–∞: {date}\n"
                              f"‚è∞ –í—Ä–µ–º—è: {new_time}",
                              self.get_main_keyboard())

        except ValueError as e:
            logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            self._show_minute_keyboard(user_id, f"‚ùå {str(e)}")
        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            self.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", self.get_main_keyboard())
        finally:
            self.reset_user_state(user_id)

    def reset_user_state(self, user_id):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_states[user_id] = STATES['START']
        if user_id in user_data:
            user_data[user_id].clear()

    def process_edit_author(self, user_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞"""
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_data[user_id].update({
            'edit_field': 'author_name',
            'edit_state': 'author_input'
        })

        self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:")
        user_states[user_id] = STATES['EDIT_INPUT']

    def process_edit_event(self, user_id):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        user_data[user_id].update({
            "edit_field": "event_name",
            'edit_state': 'event_input'
        })

        self.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        user_states[user_id] = STATES['EVENT_INPUT']

    def process_edit_duration(self, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        user_data[user_id].update({
            'edit_field': 'duration',
            'edit_state': 'duration_selection'
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        keyboard = VkKeyboard(inline=True)
        durations = ["30", "60", "120", "180"]

        for i, duration in enumerate(durations):
            keyboard.add_button(f"{duration} –º–∏–Ω", color=VkKeyboardColor.PRIMARY,
                                payload={"button": f"edit_duration_{duration}"})
            if i < len(durations) - 1:
                keyboard.add_line()  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

        self.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", keyboard)
        user_states[user_id] = STATES['EDIT_SELECTION']

    def process_edit_field_input(self, user_id, input_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if user_id not in user_data or 'edit_reservation_id' not in user_data[user_id]:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            reservation_id = user_data[user_id]["edit_reservation_id"]
            field = user_data[user_id].get("edit_field")
            new_value = None

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)
            if field == 'duration':
                if isinstance(input_data, dict) and "button" in input_data:
                    if input_data["button"].startswith("edit_duration_"):
                        new_value = input_data["button"].split("_")[2]
                    else:
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                else:
                    new_value = str(input_data).strip()

                if new_value not in ["30", "60", "120", "180"]:
                    self.process_edit_duration(user_id)
                    return

                new_value = int(new_value)
            else:
                new_value = str(input_data).strip()
                if not new_value:
                    raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if update_reservation(reservation_id, {field: new_value}):
                self.send_message(user_id, f"‚úÖ {self.get_field_name(field)} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}!",
                                  self.get_main_keyboard())
            else:
                raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        except Exception as e:
            self.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            user_states[user_id] = STATES['START']
            if user_id in user_data:
                user_data[user_id].clear()

    def get_field_name(self, field):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—è"""
        names = {
            'duration': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            'author_name': '–ò–º—è –∞–≤—Ç–æ—Ä–∞',
            'event_name': '–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            'date': '–î–∞—Ç–∞',
            'time': '–í—Ä–µ–º—è'
        }
        return names.get(field, "–ü–∞—Ä–∞–º–µ—Ç—Ä")

    def process_cancel_edit(self, user_id):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.send_message(user_id, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", self.get_main_keyboard())
        user_states[user_id] = STATES['START']

    def get_time_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        keyboard = VkKeyboard(inline=True)
        hours = ["09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22"]

        row = 0
        for i in range(0, len(hours), 4):
            for j in range(4):
                if i + j < len(hours):
                    keyboard.add_button(hours[i + j], color=VkKeyboardColor.PRIMARY,
                                        payload={"button": f"hour_{hours[i + j]}:00"})
            row += 1
            if row < (len(hours) + 3) // 4:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
                keyboard.add_line()

        return keyboard

    def format_time_range(self, start_time, duration):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            if not isinstance(start_time, str) or not start_time.strip():
                raise ValueError("–ü—É—Å—Ç–æ–µ –≤—Ä–µ–º—è")

            start = datetime.strptime(start_time.strip(), "%H:%M")
            end = start + timedelta(minutes=int(duration))
            return f"{start.strftime('%H:%M')}-{end.strftime('%H:%M')}"

        except ValueError as e:
            raise ValueError(
                f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ '{start_time}'. –¢—Ä–µ–±—É–µ—Ç—Å—è –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00). –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        for event in self.longpoll.listen():
            try:
                if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                    user_id = event.user_id
                    text = event.text.strip()
                    payload = {}

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ payload
                    try:
                        if hasattr(event, 'payload'):
                            payload = json.loads(event.payload)
                    except:
                        payload = {}

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if user_states.get(user_id) == STATES['EDIT_DAY_SELECTION'] and text:
                        self.process_edit_day_selection(user_id, text)

                    elif user_states.get(user_id) == STATES['EDIT_TIME_DATE_CHOICE']:
                        if payload and "button" in payload:
                            button = payload["button"]
                            if button in ["edit_time_change_date", "edit_time_keep_date"]:
                                self.process_edit_time_date_choice(user_id, button)

                    elif user_states.get(user_id) == STATES['EDIT_DATE_SELECTION']:
                        if payload and "button" in payload:
                            button = payload["button"]
                            if button in ["edit_month_period_1_4", "edit_month_period_5_8", "edit_month_period_9_12"]:
                                self.process_edit_date_selection(user_id, button)
                            else:
                                logger.error(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥: {button}")
                                self.send_message(user_id, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—Ü–µ–≤",
                                                  self.get_main_keyboard())


                    elif user_states.get(user_id) == STATES['EDIT_MONTH_SELECTION']:

                        if payload and "button" in payload:

                            button = payload["button"]

                            if button.startswith("edit_select_month_"):

                                parts = button.split("_")

                                if len(parts) >= 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏

                                    month = parts[3]

                                    year = parts[4]

                                    self.process_edit_month_selection(user_id, {"month": month, "year": year})

                                else:

                                    logger.error(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏ –º–µ—Å—è—Ü–∞: {button}")

                                    self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",

                                                      self.get_main_keyboard())

                    elif user_states.get(user_id) == STATES['EDIT_TIME_PERIOD_SELECTION']:
                        logger.debug(f"[{user_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ EDIT_TIME_PERIOD_SELECTION, payload: {payload}")
                        if payload and "button" in payload:
                            button = payload["button"]
                            if button.startswith("edit_time_period_"):
                                self.process_edit_time_period_selection(user_id, payload)

                    elif user_states.get(user_id) == STATES['EDIT_TIME_HOUR_SELECTION']:
                        if payload and "button" in payload:
                            button = payload["button"]
                            if button.startswith("edit_hour_"):
                                hour = button.split('_')[-1]

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö

                                if user_id not in user_data:
                                    self.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", self.get_main_keyboard())
                                    self.reset_user_state(user_id)
                                    continue

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π

                                user_data[user_id].update({
                                    "edit_hour": hour,
                                    "new_date": user_data[user_id].get("edit_date", ""),
                                    "edit_reservation_id": user_data[user_id].get("edit_reservation_id", 0)
                                })

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å

                                if not all(user_data[user_id].get(k) for k in
                                           ["edit_hour", "new_date", "edit_reservation_id"]):
                                    self.send_message(user_id, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ", self.get_main_keyboard())
                                    self.reset_user_state(user_id)
                                    continue
                                self._show_minute_keyboard(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {hour}:__. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:")

                    elif user_states.get(user_id) == STATES['EDIT_TIME_MINUTE_SELECTION']:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç —Ç–µ–∫—Å—Ç–æ–º
                        self.process_edit_time_minute_selection(user_id, text)

                    elif user_states.get(user_id) == STATES['EDIT_HOUR_PERIOD_SELECTION']:
                        if payload and "button" in payload:
                            button = payload["button"]
                            if button.startswith("edit_hour_period_"):
                                self.process_edit_hour_period_selection(user_id, payload)

                    elif user_states.get(user_id) == STATES['EDIT_HOUR_SELECTION']:
                        if payload and "button" in payload:
                            button = payload["button"]
                            logger.debug(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–∞—Å–∞: {button}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                            if button.startswith("edit_hour_"):
                                try:
                                    hour = button.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å –∏–∑ edit_hour_09
                                    self.process_edit_hour_selection(user_id, {"button": button})
                                except IndexError:
                                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏ —á–∞—Å–∞: {button}")
                                    self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å —Å–Ω–æ–≤–∞.")

                    elif user_states.get(user_id) == STATES['EDIT_MINUTE_SELECTION']:
                        if payload and "button" in payload:
                            button = payload["button"]
                            if button.startswith("edit_minute_"):
                                self.process_edit_minute_selection(user_id, payload)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
                    elif text == "–Ω–∞—á–∞—Ç—å" or text.lower() == "start" or text == "/start":
                        self.start(user_id)

                    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
                        self.about(user_id)

                    elif text == "üìå –ë—Ä–æ–Ω—å":
                        self.start_reservation(user_id)

                    elif text == "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è":
                        self.show_my_reservations(user_id)

                    elif text == "üìÜ –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        self.show_all_reservations(user_id)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ payload —Å –∫–ª—é—á–æ–º "action"
                    elif payload and "action" in payload:
                        action = payload["action"]

                        if action == "main_menu":
                            self.start(user_id)

                        elif action == "show_all_reservations":
                            self.show_all_reservations(user_id)

                        elif action == "schedule_month_period":
                            if user_states.get(user_id) == STATES['SCHEDULE_MONTH_PERIOD']:
                                self.process_schedule_month_period(user_id, payload.get("period"))

                        elif action == "schedule_current_month":
                            self.process_schedule_month_period(user_id, "current")

                        elif action == "schedule_select_month":
                            if user_states.get(user_id) == STATES['SCHEDULE_MONTH_SELECTION']:
                                self.process_schedule_month_selection(user_id, payload)

                        elif action == "schedule_day_period":
                            if user_states.get(user_id) == STATES['SCHEDULE_DAY_PERIOD']:
                                self.process_schedule_day_period(user_id, payload)

                        elif action == "schedule_select_day":
                            if user_states.get(user_id) == STATES['SCHEDULE_DAY_SELECTION']:
                                self.process_schedule_day_selection(user_id, payload.get("day"))

                        elif action == "schedule_back_to_day_periods":
                            month_data = {
                                "month": user_data[user_id]["schedule_month"],
                                "year": user_data[user_id]["schedule_year"]
                            }
                            self.process_schedule_month_selection(user_id, month_data)

                        elif action == "schedule_back_to_days":
                            self.process_schedule_day_period(user_id, {
                                "start": user_data[user_id].get("period_start", 1),
                                "end": user_data[user_id].get("period_end", 7)
                            })

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ payload —Å –∫–ª—é—á–æ–º "button"
                    elif payload and "button" in payload:
                        button = payload["button"]

                        if button.startswith("month_period_"):
                            if user_states.get(user_id) == STATES['MONTH_PERIOD_SELECTION']:
                                self.process_month_period_selection(user_id, button)

                        elif button.startswith("mo_"):
                            if user_states.get(user_id) == STATES['SELECT_MONTH']:
                                month = button.split("_")[1]
                                self.process_month_for_view(user_id, month)
                            elif user_states.get(user_id) == STATES['SELECT_DAY']:
                                month = button.split("_")[1]
                                self.process_month_for_view(user_id, month)

                        elif button.startswith("day_"):
                            if user_states.get(user_id) == STATES['SELECT_DAY']:
                                day = button.split("_")[1]
                                self.process_day_for_view(user_id, day)

                        elif button == "show_all_reservations":
                            self.show_all_reservations(user_id)

                        elif button == "edit_author":
                            self.process_edit_author(user_id)

                        elif button == "edit_event":
                            self.process_edit_event(user_id)

                        elif button == "edit_time":
                            self.process_edit_time(user_id)

                        elif button in ["edit_time_change_date", "edit_time_keep_date"]:
                            self.process_edit_time_date_choice(user_id, button)

                        elif button.startswith("edit_hour_period_"):
                            if user_states.get(user_id) == STATES['EDIT_HOUR_PERIOD_SELECTION']:
                                self.process_edit_hour_period_selection(user_id, payload)

                        elif button.startswith("edit_hour_"):
                            if user_states.get(user_id) == STATES['EDIT_HOUR_SELECTION']:
                                hour = button.split('_')[1]
                                self.process_edit_hour_selection(user_id, hour)

                        elif button.startswith("edit_minute_"):
                            if user_states.get(user_id) == STATES['EDIT_MINUTE_SELECTION']:
                                self.process_edit_minute_selection(user_id, payload)

                        elif button == "edit_date_back":
                            self.process_edit_date(user_id)

                        elif button.startswith("edit_duration_"):
                            if user_states.get(user_id) == STATES['EDIT_SELECTION']:
                                duration = button.split("_")[2]
                                self.process_edit_field_input(user_id, {"button": button})

                        elif button.startswith("edit_month_period_"):
                            self.process_edit_month_period_selection(user_id, button)

                        elif button.startswith("edit_select_month_"):
                            parts = button.split("_")
                            month = parts[3]
                            year = parts[4]
                            self.process_edit_month_selection(user_id, {"month": month, "year": year})

                        elif button.startswith("day_"):
                            day = button.split("_")[1]
                            self.process_day_selection(user_id, day)

                        elif button.startswith("hour_period_"):
                            if user_states.get(user_id) == STATES['HOUR_PERIOD_SELECTION']:
                                self.process_hour_period_selection(user_id, {"button": button})

                        elif button.startswith("hour_"):
                            hour = button.split("_")[1]
                            if user_states.get(user_id) == STATES['HOUR_SELECTION']:
                                self.process_hour_selection(user_id, hour)

                        elif button.startswith("minute_"):
                            minute = button.split("_")[1]
                            if user_states.get(user_id) == STATES['MINUTE_SELECTION']:
                                self.process_minute_selection(user_id, {"button": button})

                        elif button.startswith("duration_"):
                            duration = button.split("_")[1]
                            if user_states.get(user_id) == STATES['DURATION_SELECTION']:
                                self.process_duration_input(user_id, duration)

                        elif button.startswith("select_month_"):
                            if user_states.get(user_id) == STATES['MONTH_SELECTION']:
                                parts = button.split("_")
                                month = parts[2]
                                year = parts[3]
                                self.process_month_selection(user_id, {"month": month, "year": year})

                        elif button.startswith("day_period_"):
                            if user_states.get(user_id) == STATES['DAY_PERIOD_SELECTION']:
                                self.process_day_period_selection(user_id, button)
                            else:
                                logger.error(
                                    f"[{user_id}] –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è day_period: {user_states.get(user_id)}")
                                self.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞.")
                                user_states[user_id] = STATES['START']

                        elif button.startswith("select_day_"):
                            if user_states.get(user_id) == STATES['DAY_SELECTION']:
                                day = button.split("_")[2]
                                self.process_day_selection(user_id, day)
                            else:
                                logger.error(
                                    f"[{user_id}] –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è select_day: {user_states.get(user_id)}")
                                self.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω–µ–π —Å–Ω–∞—á–∞–ª–∞.")

                        elif button.startswith("cancel_confirm_"):
                            reservation_id = button.split("_")[2]
                            self.process_cancel_confirmation(user_id, reservation_id)

                        elif button.startswith("confirm_cancel_"):
                            reservation_id = button.split("_")[2]
                            self.process_confirm_cancel(user_id, reservation_id)

                        elif button.startswith("edit_booking_"):
                            if user_states.get(user_id) == STATES['VIEW_RESERVATIONS']:
                                booking_id = button.split('_')[-1]
                                self.process_edit_selection(user_id, booking_id)
                            else:
                                logger.warning(
                                    f"[{user_id}] –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_states.get(user_id)}")

                        elif button == "edit_date":
                            self.process_edit_date(user_id)
                        elif button == "edit_time":
                            self.process_edit_time(user_id)
                        elif button == "edit_author":
                            self.process_edit_author(user_id)
                        elif button == "edit_event":
                            self.process_edit_event(user_id)
                        elif button == "edit_duration":
                            self.process_edit_duration(user_id)
                        elif button == "edit_cancel":
                            self.process_cancel_edit(user_id)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                    elif user_id in user_states:
                        state = user_states[user_id]

                        if state == STATES['DAY_SELECTION']:
                            try:
                                day = int(text)
                                month = int(user_data[user_id]["month"])
                                year = int(user_data[user_id]["year"])
                                date = f"{year}-{month:02d}-{day:02d}"
                                if not self.is_day_fully_booked(date):
                                    self.process_day_selection(user_id, text)
                                else:
                                    self.send_message(user_id, "‚ùå –≠—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.")
                            except ValueError:
                                self.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15).")

                        elif state == STATES['VIEW_RESERVATIONS']:
                            if payload and "button" in payload:
                                button = payload["button"]
                                if button.startswith("edit_booking_"):
                                    booking_id = button.split('_')[-1]
                                    self.process_edit_selection(user_id, booking_id)
                                elif button.startswith("cancel_confirm_"):
                                    booking_id = button.split('_')[-1]
                                    self.process_cancel_confirmation(user_id, booking_id)
                            else:
                                self.send_message(user_id,
                                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏.")

                        elif state == STATES['DURATION_SELECTION']:
                            self.process_duration_input(user_id, text)

                        elif state == STATES['AUTHOR_NAME']:
                            self.process_author_name(user_id, text)

                        elif state == STATES['EVENT_NAME']:
                            self.process_event_name(user_id, text)

                        elif state == STATES['EDIT_SELECTION']:
                            if "edit_field" in user_data[user_id]:
                                self.process_edit_field_input(user_id, text)

                    else:
                        self.send_message(user_id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                                          self.get_main_keyboard())

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config_vk.py —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π VK_TOKEN
    from config import VK_TOKEN

    bot = VkBot(VK_TOKEN)
    bot.run()